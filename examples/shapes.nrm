# Module consists zero or more type declarations.

boxed offset (float64);
# If there's only one field which omit its identifier in a value type,
# it's defined as a boxed type of the field type.
#
# The key difference between boxed type and value type consisting of single
# consturctor of a field is that the former has the same JSON representation
# to its boxing target type, while the latter has thicker JSON representation
# than its only field.
#
# For example, a boxed type `value offset (float);` is represented in JSON as:
#
#     120.5
#
# While a value type `value offset (float position);` is represented in JSON as:
#
#     {"position": 120.5}
#
# What does it mean?  It means you can safely change a value type `float`
# to its boxed type `offset` with backward compatibility.

record point (
    # Value type definition `value t = t (...);` can be shortened as
    # `value t (...);`.

    offset left/x,
    # for backward compatibility, you can specify *behind name*.

    offset top,
    # trailing comma is okay
);

union shape
    # Type constructors in a sum type become translated to subtypes in OO
    # languages, and datatypes in functional languages.
    = rectangle (point upper-left, point lower-right)
    | circle (point origin, offset radius)
    ;

// This is comment.  Note that there are important differences between
// `#` comment syntax and `//` comment syntax:  the former is for docs
// thus captured as AST, while the latter is for just comments thus eliminated
// after parsing.